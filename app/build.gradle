apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-kapt'
apply plugin: 'com.alibaba.arouter'
apply plugin: 'com.sven.android.plugin'
android {
    compileSdkVersion 30
    buildToolsVersion "30.0.3"

    defaultConfig {
        applicationId "com.sven.androidall"
        minSdkVersion 21
        targetSdkVersion 30
        versionCode 1
        versionName "1.0"

        javaCompileOptions {
            annotationProcessorOptions {
                arguments = [AROUTER_MODULE_NAME: project.getName()]
            }
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

//    kotlinOp
    kotlinOptions {
        jvmTarget = "1.8"
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    implementation 'androidx.appcompat:appcompat:1.2.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.0.4'

    testImplementation 'org.jetbrains.kotlinx:kotlinx-coroutines-test:1.6.0'
    testImplementation 'junit:junit:4.+'
    androidTestImplementation 'androidx.test.ext:junit:1.1.2'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.3.0'


    api rootProject.ext.dependencies.AROUTER_API
    annotationProcessor rootProject.ext.dependencies.AROUTER_COMPILER
    annotationProcessor project(':apt-compiler')
    implementation project(':apt-api')

    // debugImplementation because LeakCanary should only run in debug builds.
    debugImplementation rootProject.ext.dependencies.LEAKCANARY
    releaseImplementation rootProject.ext.dependencies.LEAKCANARY_DEBUG
    // Optional, if you use support library fragments:
    debugImplementation rootProject.ext.dependencies.LEAKCANARY_FRAGMENT
    implementation rootProject.ext.dependencies.COROUTINES_CORE
    implementation rootProject.ext.dependencies.COROUTINES_ANDROID

    // ViewModel
    implementation rootProject.ext.dependencies.VIEWMODEL
    // ViewModel utilities for Compose
    implementation rootProject.ext.dependencies.COMPOSE
    // LiveData
    implementation rootProject.ext.dependencies.LIVEDATA
    // Lifecycles only (without ViewModel or LiveData)
    implementation rootProject.ext.dependencies.RUNTIME_KTX
    // Saved state module for ViewModel
    implementation rootProject.ext.dependencies.SAVEDSTATE
    // optional - helpers for implementing LifecycleOwner in a Service
    implementation rootProject.ext.dependencies.LIFECYCLE_SERVICE
    // optional - ProcessLifecycleOwner provides a lifecycle for the whole application process
    implementation rootProject.ext.dependencies.LIFECYCLE_PROCESS
    kapt rootProject.ext.dependencies.LIFECYCLE_COMPILER
    implementation rootProject.ext.dependencies.RETROFIT
    implementation rootProject.ext.dependencies.CONVERTER_GSON
}
repositories {
    mavenCentral()
}
